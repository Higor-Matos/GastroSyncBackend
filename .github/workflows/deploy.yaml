name: Deploy to ECR

on:
  push:
    branches: [master]

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4.1.1
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: sa-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.1
    
    - name: Build and push GastroSyncBackend.Presentation Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: GastroSyncBackend.Presentation/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/gastrosyncbackendpresentation:latest

    - name: Pull, tag, and push ElasticSearch Docker image
      run: |
        docker pull docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        docker tag docker.elastic.co/elasticsearch/elasticsearch:7.10.0 ${{ steps.login-ecr.outputs.registry }}/elasticsearch:7.10.0
        docker push ${{ steps.login-ecr.outputs.registry }}/elasticsearch:7.10.0

    - name: Pull, tag, and push Kibana Docker image
      run: |
        docker pull docker.elastic.co/kibana/kibana:7.10.0
        docker tag docker.elastic.co/kibana/kibana:7.10.0 ${{ steps.login-ecr.outputs.registry }}/kibana:7.10.0
        docker push ${{ steps.login-ecr.outputs.registry }}/kibana:7.10.0

    - name: Pull, tag, and push SQL Server Express Docker image
      run: |
        docker pull mcr.microsoft.com/mssql/server:2019-latest
        docker tag mcr.microsoft.com/mssql/server:2019-latest ${{ steps.login-ecr.outputs.registry }}/sqlserverexpress:2019-latest
        docker push ${{ steps.login-ecr.outputs.registry }}/sqlserverexpress:2019-latest
        
    - name: Set output
      id: some_step
      run: |
        echo "NAME=value" >> $GITHUB_ENV
